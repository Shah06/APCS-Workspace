0.6, 0.4 -> 0.934
0.7, 0.3 -> 0.911
0.8, 0.2 -> 0.899
0.85, 0.15 -> 0.8985
0.9, 0.1 -> 0.900
0.8, 0.2, 0.7, 0.3 -> 0.894
0.85, 0.15, 0.85, 0.15 -> 0.893
0.85, 0.15, 0.8, 0.2 -> 0.893
0.85, 0.15, 0.9, 0.1 -> 0.8925
0.85, 0.15, (0.9, 0.1)*0.85 -> 0.8924
0.85, 0.15, (0.9, 0.1)*0.90 -> 0.892405


float mAvg = movieLookupTable.get(movieID).calcAvgRating(); // weight: 30
//				float div = mAvg/gAvg; // use this somehow
				float uAvg = sumRating / ((float)n); // weight: 70
				
				float weightedAvg;
				// check for outliers
				if (Math.abs(mAvg - uAvg) > 2) {
					// weight closer to user
					weightedAvg = (0.9f*uAvg) + (0.1f*mAvg);
				} else {
					weightedAvg = (0.85f*uAvg) + (0.15f*mAvg);
				}
				
				return weightedAvg;

-> 0.889